from typing import Optional
from PIL import Image
import json

from loguru import logger

from katalyst_core.algorithms.docs_to_desc.utilities import (
    convert_image_to_base64,
    create_llm_image_format,
    images_to_json,
    init_client,
    resize_image,
)
from katalyst_core.algorithms.stl_to_pics.to_pics import stl_to_pictures


def _image_to_doc(image_path):
    image = Image.open(image_path)
    img_ext = image_path.lower().split(".")[-1]
    if img_ext.upper() == "JPG":
        img_ext = "jpeg"
    image = resize_image(image)
    image_data = convert_image_to_base64(image, img_ext)
    doc = json.loads(
        create_llm_image_format(base64_image=image_data, media_type=img_ext)
    )

    return doc


def _stl_to_image_docs(stl_path):
    stl_images = stl_to_pictures(stl_path)
    stl_images = [Image.open(stl_image) for stl_image in stl_images]

    docs = images_to_json(stl_images, create_llm_image_format)

    for image in stl_images:
        image.close()

    return docs


def describe_stl(stl_path, model, llm_api_key: Optional[str] = None) -> Optional[str]:
    try:
        docs = _stl_to_image_docs(stl_path)

        client = init_client(llm_api_key)

        docs = [
            *docs,
            {
                "type": "text",
                "text": """
The pictures attached are different views of the same object modeled in a CAD software. Please describe with as much detail as possible the object.
We are especially interested in what it is. What parts and subparts it contains. How do they look visually or geometrically. What are important parameters of this model like possible sizes, standards, counts, proportions. What equations could have been used to model certain implicit surfaces (only if it appears there are some).
As this is just a 3D model, we are not interested in the material.
    """,
            },
        ]

        messages = [
            {"role": "user", "content": docs},
        ]

        response = client.chat.completions.create(
            model=model, messages=messages, temperature=0.1
        )
        description = response.choices[0].message.content
        return description

    except Exception as e:
        logger.warning(f"Error in describe_stl: {e}")
        return None


def compare_stl_to_prompt(
    stl_path, prompt, model, llm_api_key: Optional[str] = None
) -> Optional[tuple[str, int]]:
    try:
        docs = _stl_to_image_docs(stl_path)

        client = init_client(llm_api_key)

        docs = [
            *docs,
            {
                "type": "text",
                "text": f"""
The pictures attached are different views of the same object modeled in a CAD software. They were generated by a low quality text to CAD AI.
Please find everything that visually doesn't match between the prompt used to generated the model and how the model looks like. As this is just a 3D model, we are not interested in the material or color.
Instead, critique shape, sizes, counts, positions, proportions, geometric aspects, absence of parts, subparts, absence of certain critical CAD steps, and lack of use of certain standard.
At the end, rate the quality of the model from 1 to 10, where 1 is the worst and 10 is the best.

Prompt used:

<prompt>
{prompt}
</prompt>

Answer format:

<critique>
a very long and detailed bullet list
</critique>
<rating>
0
</rating>
        
Please answer in the format above without text before or after.
    """,
            },
        ]

        messages = [
            {"role": "user", "content": docs},
        ]

        response = client.chat.completions.create(
            model=model, messages=messages, temperature=0.1
        )
        response = response.choices[0].message.content

        critique = response.split("<critique>")[1].split("</critique>")[0]
        rating = int(response.split("<rating>")[1].split("</rating>")[0])

    except Exception as e:
        logger.warning(f"Error in compare_stl_to_prompt: {e}")
        return None

    logger.info(f"[{stl_path}] rating: {rating}")
    return critique, rating
